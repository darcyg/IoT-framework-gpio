#!/usr/bin/python3

# Python GPIO to DBUS simple client switch

import dbus

import os
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GObject

def update_state():
    global leds
    global state
    for x in range(0, 8):
        if x == state:
            leds[x].clear();
        else:
            leds[x].set();


def right_click(port, value):
    global state
    if value == "0":
        return
    if state == 7:
        state = 0
    else:
        state += 1
    update_state()


def left_click(port, value):
    global state
    if value == "0":
        return
    if state == 0:
        state = 7
    else:
        state -= 1
    update_state()


def get_led(led_pin):
    led = dbus.SystemBus().get_object("com.devicehive.gpio.GpioPin",
        "/com/devicehive/gpio/{}".format(led_pin))
    led.init("out")
    return led


def get_button(button_pin, cb):
    button = dbus.SystemBus().get_object("com.devicehive.gpio.GpioPin",
        "/com/devicehive/gpio/{}".format(button_pin))
    button.init("both")
    button.connect_to_signal("pin_value_changed", cb)
    return button


def main():
    global leds
    global state
    DBusGMainLoop(set_as_default=True)

    pdir = os.path.realpath(__file__) + "-profiles"
    control = dbus.SystemBus().get_object("com.devicehive.gpio.Control",
        "/com/devicehive/gpio/Control")
    control.clear()
    control.load_profile_for_board(pdir)

    button_1 = get_button("BUTTON1", left_click)
    button_2 = get_button("BUTTON2", right_click)

    leds = list()
    state = 0
    for x in range(1, 9):
        leds.append(get_led("LED{}".format(x)))
    update_state()
    try:
        GObject.MainLoop().run()
    except KeyboardInterrupt:
        for led in leds:
            led.deinit()
        button_1.deinit()
        button_2.deinit()


if __name__ == "__main__":
    main()
