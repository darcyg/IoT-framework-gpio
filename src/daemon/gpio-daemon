#!/usr/bin/python3

#Python GPIO to DBUS Gateway

import time
import dbus.service
import threading
import select
import os
import yaml
import sys
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GObject

DBUS_BUS_NAME = "com.devicehive.gpio"

class GPIOPinService(dbus.service.Object):
	def __init__(self, pin, port):
		self.m_service_path = "/{}".format(pin)
		self.m_port = port
		self.m_poll_thread = None
		self.m_poll_flag = False
		self.m_pin = pin
		self.m_gpio_port_path = "/sys/class/gpio/gpio{}".format(self.m_port)
		self.m_gpio_port_path_value = os.path.join(self.m_gpio_port_path, "value")
		bus_name = dbus.service.BusName(DBUS_BUS_NAME, dbus.SystemBus())
		dbus.service.Object.__init__(self, bus_name, self.m_service_path)

	# send when pin state changed
	@dbus.service.signal(DBUS_BUS_NAME)
	def pin_value_changed(self, port, value):
		pass

	# pin state poller
	def poller(self):
		watcher = open(self.m_gpio_port_path_value, "r")
		poller = select.poll()
		poller.register(watcher, select.POLLPRI or select.POLLERR or select.POLLIN)
		try:
			laststate = watcher.read(1)
		except OSError:
			poller.unregister(watcher)
			return
		while self.m_poll_flag:
			# TODO remove wait cycle and exit with deinit and re-init
			pollresult = poller.poll(1000)
			if not pollresult:
				continue
			try:
				watcher.seek(0)				
				state = watcher.read(1)
			except OSError:
				break
			if state == "1" or state == "0":
				if state != laststate:
					laststate = state
					self.pin_value_changed(self.m_pin, state)
		poller.unregister(watcher)
		watcher.close()

	# init pin
	@dbus.service.method(DBUS_BUS_NAME)
	def init(self, mode):
		# mode can be out, in, rising, falling or both
		if os.path.isdir(self.m_gpio_port_path):
			self.deinit()
		with open("/sys/class/gpio/export", 'w') as fi:
			fi.write(self.m_port)
		if mode == "out":
			with open(os.path.join(self.m_gpio_port_path, "direction"), "w") as fi:
				fi.write("out")
		else:
			with open(os.path.join(self.m_gpio_port_path, "direction"), "w") as fi:
				fi.write("in")
			if mode != "in":
				with open(os.path.join(self.m_gpio_port_path, "edge"), "w") as fi:
					fi.write(mode)
				self.m_poll_flag = True
				self.m_poll_thread = threading.Thread(target=self.poller)
				self.m_poll_thread.start()
			else:
				with open(os.path.join(self.m_gpio_port_path, "edge"), "w") as fi:
					fi.write("none")

	# deinit pin and free all resource
	@dbus.service.method(DBUS_BUS_NAME)
	def deinit(self):
		with open("/sys/class/gpio/unexport", 'w') as fi:
			fi.write(self.m_port)
		if self.m_poll_flag:
			self.m_poll_flag = False
			self.m_poll_thread.join()

	# set pin state
	@dbus.service.method(DBUS_BUS_NAME)
	def set_value(self, value):
		if value == "1":
			with open(self.m_gpio_port_path_value, "w") as fi:
				fi.write("1")
		else:
			with open(self.m_gpio_port_path_value, "w") as fi:
				fi.write("0")

	# set pin state to high
	@dbus.service.method(DBUS_BUS_NAME)
	def set(self):
		with open(self.m_gpio_port_path_value, "w") as fi:
			fi.write("1")

	# set pin state to low
	@dbus.service.method(DBUS_BUS_NAME)
	def clear(self):
		with open(self.m_gpio_port_path_value, "w") as fi:
			fi.write("0")

	# get pin state
	@dbus.service.method(DBUS_BUS_NAME)
	def get(self):
		with open(self.m_gpio_port_path_value, "r") as fi:
			return fi.read(1)

	# toggle pin state
	@dbus.service.method(DBUS_BUS_NAME)
	def toggle(self):
		if self.get() == "0":
			self.set()
		else:
			self.clear()

class GPIOInfoService(dbus.service.Object):
	def __init__(self, pin_services):
		self.m_pin_services = pin_services
		bus_name = dbus.service.BusName(DBUS_BUS_NAME, dbus.SystemBus())
		dbus.service.Object.__init__(self, bus_name, "/info")
	
	# return list of GPIO pins
	@dbus.service.method(DBUS_BUS_NAME)
	def ls(self):
		if not self.m_pin_services:
			return [""]
		return list(self.m_pin_services.keys())

class GPIOControlService(dbus.service.Object):
	def __init__(self, pin_services):
		self.m_pin_services = pin_services
		bus_name = dbus.service.BusName(DBUS_BUS_NAME, dbus.SystemBus())
		dbus.service.Object.__init__(self, bus_name, "/control")
	
	# add pin
	@dbus.service.method(DBUS_BUS_NAME)
	def add(self, pin, port):
		for servicepin, service in self.m_pin_services.items():
			if service.m_port == port:
				raise FileExistsError("Port: {} already used by {}".format(
					port, service.m_pin))
			if servicepin == pin:
				raise FileExistsError("Pin: {} already exists.".format(pin))
		self.m_pin_services[pin] = GPIOPinService(pin, str(port))
		print("Create pin: {} for port: {}".format(pin, port))

	# rm pin
	@dbus.service.method(DBUS_BUS_NAME)
	def rm(self, pin):
		print("Remove pin: {} for port: {}".format(pin,
			self.m_pin_services[pin].m_port))
		try:
			self.m_pin_services[pin].deinit()
		except IOError:
			# if pin was not init
			pass
		self.m_pin_services[pin].remove_from_connection()
		del self.m_pin_services[pin]

	# load profile
	@dbus.service.method(DBUS_BUS_NAME)
	def load_profile(self, yamlpath):
		print("Loading profile {}".format(yamlpath))
		with open(yamlpath) as yf:
			try:
				pin_map = yaml.load(yf)
				if not pin_map:
					raise yaml.scanner.ScannerError("Empty file")
			except yaml.scanner.ScannerError:
				raise SyntaxError("File does not contain yaml profile.")
		for pin, port in pin_map.items():
			self.add(pin, port)

	# load profile for current board from profiles directory
	@dbus.service.method(DBUS_BUS_NAME)	
	def load_profile_for_board(self, yamldirpath):
		try:
			with open("/sys/firmware/devicetree/base/model", 'r') as hwid:
				model = str(hwid.read()).rstrip("\0")
		except IOError:
			raise SystemError("Board not found.")
		yamlpath = os.path.join(yamldirpath, "{}.yaml".format(model))
		try:
			self.load_profile(yamlpath)
		except FileExistsError:
			raise
		except IOError:
			raise FileNotFoundError("Profile file for {} not found.".format(model))	

	# clear all
	@dbus.service.method(DBUS_BUS_NAME)
	def clear(self):
		while self.m_pin_services:
			self.rm(list(self.m_pin_services.keys())[0])

def main():
	# get device and it pin map
	# probably this is not the best place to check hardware model

	# init d-bus
	DBusGMainLoop(set_as_default=True)
	# create services
	pin_services = dict()
	gpio_info_service = GPIOInfoService(pin_services)
	gpio_control_service = GPIOControlService(pin_services)

	profileLoaded = False
	try:
		if len(sys.argv) > 1:
			if os.path.isfile(sys.argv[1]):
				gpio_control_service.load_profile(sys.argv[1])
			elif os.path.isdir(sys.argv[1]):
				gpio_control_service.load_profile_for_board(sys.argv[1])
			else:
				print("Profile does not exist.")
				return 1
		else:
			profiles_dir = os.path.join(os.path.dirname(
				os.path.realpath(__file__)),"../profiles")
			gpio_control_service.load_profile_for_board(profiles_dir)
		profileLoaded = True
	except IOError:
		print("Cannot read profile file.")
	except SyntaxError:
		print("Error while parsing profile {}".format(sys.argv[1]))
	except SystemError:
		print("Cannot detect board.")
	except FileNotFoundError:
		print("Profile for current board does not exist.")
	if profileLoaded == False: 
		if len(sys.argv) > 1:
			return 1
		print("Starting without profile.")

	# start mainloop
	GObject.MainLoop().run()

if __name__ == "__main__":
	main()
